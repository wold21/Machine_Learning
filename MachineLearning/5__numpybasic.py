# -*- coding: utf-8 -*-
"""5_ numpyBasic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wTK1jHhSLOY8B1YeMbSyp7sE_eC2Iroe
"""

import numpy as np

#  numpy  array는 일반 array가 아닌 ndarray라고 이야기를 한다.
#  숫자만 입력 가능함.

arr1 = np.array([1, 2, 3])
print(type(arr1))

arr2 = np.array([[1, 2, 3],
                          [4, 5, 6]])
print(type(arr2))

"""# np.arange"""

arr = np.arange(10)
arr

arr = np.arange(1, 10)
arr

arr = np.arange(1, 10, 2)
arr

"""# 다차원 배열 만들기

-  np.zeros
-  np.ones
-  np.full
"""

np.zeros(5)

np.zeros((4, 5))

np.zeros((3, 4, 5))

np.zeros((3, 4, 5, 6)).shape

np.zeros((3, 4, 5, 6)).ndim

np.ones(5)

np.ones((2,  3))

np.ones((2, 3)) * 5

np.full((3, 4), 7)

"""# 단위 행렬 만들기

-  np.eye
"""

np.eye(3)

np.eye(3,  4)

"""# 구간 나누기 linspace

- np.linspace
"""

np.linspace(1, 10, 3)

np.linspace(1, 10, 5)

"""# Random을 사용하기 위한 Numpy

- 랜덤 값은 보통 초기화를 하기 위해 사용한다.
"""

# 0, 1 사이 분포로 랜덤한 배열 생성하기

np.random.rand(4, 5, 3)

# 정규 분포로 이루어진 랜덤 값 생성하기

np.random.randn(10)

np.random.randn(3,  4,  2)

#  정수 랜덤 배열 만들기

np.random.randint(1,  100,  size=(5,))

np.random.randint(1, 100, size=(4, 5, 4))

np.random.randint(1, 100, size=(5,  1))

#  랜덤 고정하기

np.random.seed(42)
np.random.randn(3, 4)

# 1차원 배열에서 랜덤 생플링 하기
# 두가지 방법이 있다.

# 1. choice
np.random.choice(100, size=(3, 4)) # 0 - 99까지의 숫자 중 랜덤하게 3, 4 형식의 배열 만들기.

arr = np.array([1, 4, 5, 6, 4.3, 7.8, 30, 54.3])
np.random.choice(arr, size=(2, 2), replace=False) # replace가 True면 중복 추출 허용 False면 중복 추출 불허용

#  확률분포에 따른 ndarray 생성하기
# 1 ~ 3까지 4행 5열의 랜덤값을 생성한다.
arr = np.random.uniform(1.0, 3.0, size=(4, 5))
arr

# normal 또는 randn  :  정규분포
np.random.normal(size=(3,  4))
np.random.randn(3,  4)

x = np.arange(10)
x

x[3] = 100
x

x = x.reshape(2, 5)
x

x[0][3] = 3
x

x[0, 3]

x[:,  2]

x = np.arange(36).reshape(3, 4, 3)
x

x.ndim

x[:, :2, :2]

x[:2, ...]

x = np.arange(12).reshape(3, 4)
x

x2 = x[np.newaxis, :, :, np.newaxis]
x2.shape

x3  =  x[np.newaxis, ..., np.newaxis]
x3.shape

x4 = np.squeeze(x3)
x4.shape

"""# 배열의 형상 바꾸기

-  ravel()
- flatten()
- reshape()
"""

x  =  np.arange(15).reshape(3,  5)
x.ndim

np.ravel(x)

temp = np.ravel(x)
print(temp)

temp[0] = 100
print(temp)
print(x)

y = np.arange(15).reshape(3, 5)
y

temp2 = y.flatten()
print(temp2)
print(y)

temp2[0] = 100
print(temp2)
print(y)

x = np.arange(15)
x.reshape(3, 5)

# x.reshape(2, 4, 1)

x =  np.arange(36).reshape(3, 2, 6)
x

temp = x.reshape(3, 4, 3)
temp

temp = x.reshape(3, -1, 3)
temp.shape

"""#  브로드 캐스팅 Broad casting

- Shape이 다른 두 array의 연산을 진행한다.
"""

# shape이 같을 때의 연산  
x = np.arange(15).reshape(3, 5)
y = np.random.randn(15).reshape(3, 5)

print(x)
print(y)

x + y

x * y

# 스칼라 값을 곱하면 자동으로 곱해지는 스칼라 값이 브로드 캐스팅 된다..
x * 2

a = np.arange(12).reshape(4, 3)
b = np.arange(100, 103)
c = np.arange(1000, 1004)
d = b.reshape(1, 3)
print(a.shape)
print(b.shape)
print(c.shape)
print(d.shape)

a + b

a + d

print(b)
print(d)

e = np.arange(6).reshape(2, 3)
e.shape

# 안된다.
# a + e

e.T

e

